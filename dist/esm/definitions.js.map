{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAYA,MAAM,CAAN,IAAY,iBASX;AATD,WAAY,iBAAiB;IAC3B,kCAAa,CAAA;IACb,oCAAe,CAAA;IACf,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,wCAAmB,CAAA;IACnB,oCAAe,CAAA;AACjB,CAAC,EATW,iBAAiB,KAAjB,iBAAiB,QAS5B;AAeD,MAAM,CAAN,IAAY,cAQX;AARD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,6CAA2B,CAAA;IAC3B,mCAAiB,CAAA;IACjB,uCAAqB,CAAA;IACrB,yCAAwB,CAAA;IACxB,qCAAmB,CAAA;IACnB,mCAAiB,CAAA;AACnB,CAAC,EARW,cAAc,KAAd,cAAc,QAQzB","sourcesContent":["import { PluginListenerHandle } from '@capacitor/core';\n\nexport interface VideoPlayerPositionState {\n  currentMillis: number,\n  totalMillis: number\n}\n\nexport interface ClosedVideoPlayerState extends VideoPlayerPositionState {\n  completed: boolean,\n  subtitle: string\n}\n\nexport enum AudioPlayerStatus {\n  NONE = \"NONE\",\n  ERROR = \"ERROR\",\n  LOADING = \"LOADING\",\n  LOADED = \"LOADED\",\n  RUNNING = \"RUNNING\",\n  PAUSED = \"PAUSED\",\n  STOPPED = \"STOPPED\",\n  ENDED = \"ENDED\"\n}\n\nexport interface AudioPlayerState {\n  state: AudioPlayerStatus,\n  currentMillis?: number,\n  totalMillis?: number,\n  error?: string, // Only used if state = AudioPlayerStatus.ERROR\n  remainingTime?: number // Only used if setLooping() is used\n}\n\nexport interface AudioNotificationOptions {\n  forwardIncrementMs?: number;\n  rewindIncrementMs?: number;\n}\n\nexport enum DownloadStatus {\n  REQUESTED = \"REQUESTED\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  PAUSED = \"PAUSED\",\n  CANCELED = \"CANCELED\",\n  COMPLETED =  \"COMPLETED\",\n  DELETED = \"DELETED\",\n  FAILED = \"FAILED\"\n}\n\nexport interface DownloadStateMediaInfo {\n  mediaId: string\n  status: DownloadStatus,\n  estimatedSize?: number,\n  maxSize?: number,\n  downloadedBytes?: number,\n  progress?: number,\n  reason?: string,\n  title?: string,\n}\n\nexport interface MediaMetaData {\n  mediaId: string,\n  title: string,\n  totalMillis: number,\n  thumbnail: string,\n  posterUrl: string,\n  downloaded: boolean,\n  fileSize: number // in bytes\n  subtitles: Array<Subtitle>\n}\n\nexport interface Subtitle {\n  language: string;\n  src: string;\n}\n\nexport interface BrightcovePlayerPlugin {\n\n  addListener(eventName: string, listenerFunc: (...args: any) => void): Promise<PluginListenerHandle> & PluginListenerHandle;\n  removeAllListeners(): Promise<void>;\n\n  // Brightcove account\n  updateBrightcoveAccount(options: { accountId: string, policyKey: string }): Promise<void>;\n\n  // Video & Audio\n  getMetadata(options: { fileId: string }) : Promise<{ metadata: MediaMetaData }>\n\n  // Video - Return nothing if video resume\n  playVideo(options: { fileId?: string, position?: number, local?: boolean, subtitle?: string }): Promise<{ name?: string, duration?: number }>;\n\n  pauseVideo(): Promise<void>;\n  closeVideo(): Promise<void>;\n\n  setSubtitleLanguage(options: { language: string }): Promise<void>;\n\n  // Audio\n  loadAudio(options: { fileId: string, local?: boolean, defaultPosterUrl?: string }): Promise<{ name?: string, duration?: number }>;\n  stopAudio():  Promise<void>;\n  pauseAudio():  Promise<void>;\n  playAudio(): Promise<void>;\n  backwardAudio(options: { amount?: number }): Promise<void>;\n  forwardAudio(options: { amount?: number }): Promise<void>;\n  seekToAudio(options: { position: number }): Promise<void>;\n  enableAudioLooping(options?: { time: number }): Promise<void>;\n  disableAudioLooping(): Promise<void>;\n  isAudioLooping(): Promise<{ value: boolean }>\n  getAudioPlayerState(): Promise<AudioPlayerState>\n  destroyAudioPlayer(): Promise<void>;\n  setAudioNotificationOptions(options: AudioNotificationOptions): Promise<void>;\n\n  // Offline files\n  setDownloadNotifications(options: { enabled: boolean }): Promise<void>;\n  isMediaAvailableLocally(options: { fileId: string }): Promise<{value: boolean}>;\n  downloadMedia(options: { fileId: string }): Promise<void>;\n  getDownloadedMediasState(): Promise<{medias: Array<DownloadStateMediaInfo>}>;\n  deleteDownloadedMedia(options: { fileId: string}): Promise<void>;\n\n  // Workaround for Android : better solution ?\n  notifyBackButtonPressed(): Promise<void>;\n\n  playInternalAudio(options: {file: string}): Promise<void>;\n\n  // iOS only as for 0.0.20\n  deleteAllDownloadedMedias(): Promise<void>\n}\n"]}