{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAYA,MAAM,CAAN,IAAY,iBASX;AATD,WAAY,iBAAiB;IAC3B,kCAAa,CAAA;IACb,oCAAe,CAAA;IACf,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,wCAAmB,CAAA;IACnB,oCAAe,CAAA;AACjB,CAAC,EATW,iBAAiB,KAAjB,iBAAiB,QAS5B;AAeD,MAAM,CAAN,IAAY,cAQX;AARD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,6CAA2B,CAAA;IAC3B,mCAAiB,CAAA;IACjB,uCAAqB,CAAA;IACrB,yCAAwB,CAAA;IACxB,qCAAmB,CAAA;IACnB,mCAAiB,CAAA;AACnB,CAAC,EARW,cAAc,KAAd,cAAc,QAQzB","sourcesContent":["import { PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport interface VideoPlayerPositionState {\r\n  currentMillis: number,\r\n  totalMillis: number\r\n}\r\n\r\nexport interface ClosedVideoPlayerState extends VideoPlayerPositionState {\r\n  completed: boolean,\r\n  subtitle: string\r\n}\r\n\r\nexport enum AudioPlayerStatus {\r\n  NONE = \"NONE\",\r\n  ERROR = \"ERROR\",\r\n  LOADING = \"LOADING\",\r\n  LOADED = \"LOADED\",\r\n  RUNNING = \"RUNNING\",\r\n  PAUSED = \"PAUSED\",\r\n  STOPPED = \"STOPPED\",\r\n  ENDED = \"ENDED\"\r\n}\r\n\r\nexport interface AudioPlayerState {\r\n  state: AudioPlayerStatus,\r\n  currentMillis?: number,\r\n  totalMillis?: number,\r\n  error?: string, // Only used if state = AudioPlayerStatus.ERROR\r\n  remainingTime?: number // Only used if setLooping() is used\r\n}\r\n\r\nexport interface AudioNotificationOptions {\r\n  forwardIncrementMs?: number;\r\n  rewindIncrementMs?: number;\r\n}\r\n\r\nexport enum DownloadStatus {\r\n  REQUESTED = \"REQUESTED\",\r\n  IN_PROGRESS = \"IN_PROGRESS\",\r\n  PAUSED = \"PAUSED\",\r\n  CANCELED = \"CANCELED\",\r\n  COMPLETED =  \"COMPLETED\",\r\n  DELETED = \"DELETED\",\r\n  FAILED = \"FAILED\"\r\n}\r\n\r\nexport interface DownloadStateMediaInfo {\r\n  mediaId: string\r\n  status: DownloadStatus,\r\n  estimatedSize?: number,\r\n  maxSize?: number,\r\n  downloadedBytes?: number,\r\n  progress?: number,\r\n  reason?: string,\r\n  title?: string,\r\n}\r\n\r\nexport interface MediaMetaData {\r\n  mediaId: string,\r\n  title: string,\r\n  totalMillis: number,\r\n  thumbnail: string,\r\n  posterUrl: string,\r\n  downloaded: boolean,\r\n  fileSize: number // in bytes\r\n  subtitles: Array<Subtitle>\r\n}\r\n\r\nexport interface Subtitle {\r\n  language: string;\r\n  src: string;\r\n}\r\n\r\nexport interface BrightcovePlayerPlugin {\r\n\r\n  addListener(eventName: string, listenerFunc: (...args: any) => void): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n  removeAllListeners(): Promise<void>;\r\n\r\n  // Brightcove account\r\n  updateBrightcoveAccount(options: { accountId: string, policyKey: string }): Promise<void>;\r\n\r\n  // Video & Audio\r\n  getMetadata(options: { fileId: string }) : Promise<{ metadata: MediaMetaData }>\r\n\r\n  // Video - Return nothing if video resume\r\n  playVideo(options: { fileId?: string, position?: number, local?: boolean, subtitle?: string }): Promise<{ name?: string, duration?: number }>;\r\n\r\n  pauseVideo(): Promise<void>;\r\n  closeVideo(): Promise<void>;\r\n\r\n  setSubtitleLanguage(options: { language: string }): Promise<void>;\r\n\r\n  // Audio\r\n  loadAudio(options: { fileId: string, local?: boolean, defaultPosterUrl?: string }): Promise<{ name?: string, duration?: number }>;\r\n  stopAudio():  Promise<void>;\r\n  pauseAudio():  Promise<void>;\r\n  playAudio(): Promise<void>;\r\n  backwardAudio(options: { amount?: number }): Promise<void>;\r\n  forwardAudio(options: { amount?: number }): Promise<void>;\r\n  seekToAudio(options: { position: number }): Promise<void>;\r\n  enableAudioLooping(options?: { time: number }): Promise<void>;\r\n  disableAudioLooping(): Promise<void>;\r\n  isAudioLooping(): Promise<{ value: boolean }>\r\n  getAudioPlayerState(): Promise<AudioPlayerState>\r\n  destroyAudioPlayer(): Promise<void>;\r\n  setAudioNotificationOptions(options: AudioNotificationOptions): Promise<void>;\r\n\r\n  // Offline files\r\n  setDownloadNotifications(options: { enabled: boolean }): Promise<void>;\r\n  isMediaAvailableLocally(options: { fileId: string }): Promise<{value: boolean}>;\r\n  downloadMedia(options: { fileId: string }): Promise<void>;\r\n  getDownloadedMediasState(): Promise<{medias: Array<DownloadStateMediaInfo>}>;\r\n  deleteDownloadedMedia(options: { fileId: string}): Promise<void>;\r\n\r\n  // Workaround for Android : better solution ?\r\n  notifyBackButtonPressed(): Promise<void>;\r\n\r\n  playInternalAudio(options: {file: string}): Promise<void>;\r\n\r\n  // iOS only as for 0.0.20\r\n  deleteAllDownloadedMedias(): Promise<void>\r\n}\r\n"]}