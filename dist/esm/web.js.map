{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nimport type {\r\n  BrightcovePlayerPlugin,\r\n  AudioPlayerState,\r\n  AudioNotificationOptions,\r\n  DownloadStateMediaInfo, MediaMetaData\r\n} from './definitions';\r\n\r\nexport class BrightcovePlayerWeb extends WebPlugin implements BrightcovePlayerPlugin {\r\n  constructor() {\r\n\r\n    super({\r\n      name: 'BrightcovePlayer',\r\n      platforms: ['web'],\r\n    });\r\n\r\n    window.addEventListener('backButton', () => this.notifyBackButtonPressed());\r\n  }\r\n\r\n  // Brightcove account\r\n  async updateBrightcoveAccount(options: { accountId: string, policyKey: string }): Promise<void> {\r\n    console.log('updateBrightcoveAccount', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  // Video & Audio\r\n  getMetadata(options: { fileId: string }): Promise<{ metadata: MediaMetaData }> {\r\n    console.log('getMetadata', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  // Video\r\n  async playVideo(options: { fileId: string, position?: number, local?: boolean }): Promise<{ name: string, duration: number }> {\r\n    console.log('playVideo', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  pauseVideo(): Promise<void> {\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  closeVideo(): Promise<void> {\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  // Android only\r\n  async setDownloadNotifications(options: { enabled: boolean}): Promise<void> {\r\n    console.log('setDownloadNotifications', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async setSubtitleLanguage(options: { language: string }): Promise<void> {\r\n    console.log('setSubtitleLanguage', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  // Audio\r\n  async loadAudio(options: { fileId: string, local?: boolean, defaultPosterUrl?: string }): Promise<{ name?: string, duration?: number }> {\r\n    console.log('loadAudio', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async backwardAudio(options: { amount: number }): Promise<void> {\r\n    console.log('backwardAudio', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async forwardAudio(options: { amount: number }): Promise<void> {\r\n    console.log('forwardAudio', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async seekToAudio(options: { position: number }): Promise<void> {\r\n    console.log('seekTo', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async enableAudioLooping(options?: { time: number }): Promise<void> {\r\n    console.log('enable looping', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async disableAudioLooping(): Promise<void> {\r\n    console.log('disable looping');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async isAudioLooping(): Promise<{ value: boolean }> {\r\n    console.log('is looping');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async stopAudio(): Promise<void> {\r\n    console.log('stopAudio');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async pauseAudio(): Promise<void> {\r\n    console.log('pauseAudio');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n  async playAudio(): Promise<void> {\r\n    console.log('playAudio');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async getAudioPlayerState(): Promise<AudioPlayerState> {\r\n    console.log('getAudioPlayerState');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async destroyAudioPlayer(): Promise<void> {\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async setAudioNotificationOptions(options: AudioNotificationOptions): Promise<void> {\r\n    console.log('Set audio notification options', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n\r\n  // Offline files\r\n  async isMediaAvailableLocally(options: { fileId: string }): Promise<{value: boolean}> {\r\n    console.log('Is Media Available Locally', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async downloadMedia(options: { fileId: string, showNotification?: boolean }): Promise<void> {\r\n    console.log('Download Media', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async getDownloadedMediasState(): Promise<{ medias: Array<DownloadStateMediaInfo>}> {\r\n    console.log(\"get Downloaded medias\");\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async deleteDownloadedMedia(options: { fileId: string }): Promise<void> {\r\n    console.log(\"Delete downloaded file\", options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  // Workaround for Android : better solution ?\r\n  async notifyBackButtonPressed(): Promise<void> {\r\n    console.log('Not implemented');\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async playInternalAudio(options: {file: string}): Promise<void> {\r\n    console.log('Local internal not implemented ', options);\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n\r\n  async deleteAllDownloadedMedias(): Promise<void> {\r\n    console.log('Delete all downloaded medias')\r\n    throw this.unimplemented('Not implemented on web.');\r\n  }\r\n}\r\n"]}